#!/bin/sh
SHOW_BOOT_SYSTEM=0
SHOW_BOOT_VERSION=0
FLIP_BOOT_MARKER=0
GRUBCFG_FILE_PATH=/boot/grub/grub.cfg
VERSION_FILE_PATH=/boot/version-num.txt
#UUID_FILE_PATH=/boot/brbox-uuid.txt
SHOW_BKBOOT_VERSION=0
ONE_BRBOX_NAME=brbox1 #name of the first brbox system
TWO_BRBOX_NAME=brbox2 #name of the second brbox system
ONE_BRBOX_PART=sda2 #partition
TWO_BRBOX_PART=sda3 #partition
#USAGE="script for generating single niro binary from multiple niro fmw"
USAGE="usage:$0 -c[show_current_booted_system   ] -v[show_version_of_current_system]"
USAGE1="usage:$0 -b[show_version_of_other_system] -f[flip_boot_marker_flag]"

###############################################################
ReadBootSystem()
{
	RESULT=$(cat /proc/cmdline | grep brboxsystem )
	if [ $? != "0" ]; then
		return 1
	fi
	RESULT=$(echo $RESULT | grep -o "brboxsystem=.*" | awk '{print $1}' | sed 's/brboxsystem=//')
	echo $RESULT
	return 0
}
#cat /boot/grub/grub.cfg |grep "set default="
ReadBootMarker() #$1=path of grubcfg file
{
	if [ ! -f  "$1"  ];then
		return 1
	fi
	RESULT=$(cat $1 | grep "set default=" )
	if [ $? != "0" ]; then
		return 1
	fi
	RESULT=$(echo $RESULT | grep -o "default=.*" | sed 's/default=//')
	echo $RESULT
	return 0
}
WriteBootMarker() #$1=path_of_grubcfg_file $2=flag_vlue $3=path_of_uuid_file
{
#	if [ $2 = 0 ]; then
#		NEW_UUID=$(awk '{print $1}' $3)
#		NEW_UUID=$(echo $NEW_UUID | grep -o "uuidbrbox1=.*" | sed 's/uuidbrbox1=//')
#		sed -i "s|brboxsystem=brbox1 root=PARTUUID=.*|brboxsystem=brbox1 root=PARTUUID=$NEW_UUID|" $1
#	elif [ $2 = 1 ]; then
#		NEW_UUID=$(awk '{print $2}' $3)
#		NEW_UUID=$(echo $NEW_UUID | grep -o "uuidbrbox2=.*" | sed 's/uuidbrbox2=//')
#		sed -i "s|brboxsystem=brbox2 root=PARTUUID=.*|brboxsystem=brbox2 root=PARTUUID=$NEW_UUID|" $1
#	else
#		return 1
#	fi
	sed -i "s|set default=.*|set default=$2|" $1
	return 0
}
ReadBootVersion() #$1=filepath
{
	if [ ! -f  "$1"  ];then
		return 1
	fi
	RESULT=$(cat $1 )
	if [ $? != "0" ]; then
		return 1
	fi
	echo $RESULT
	return 0
}
MountDevice() #1=/dev/node retur-val=folderpath of mounted system
{
	TEMP_MOUNT_POINT=$(mktemp -d)
	if [ $? != "0" ]; then #unable to create temp mount directory
		return 1
	fi
	mount $1 $TEMP_MOUNT_POINT
	if [ $? != "0" ]; then #unable mount device, filesystem might be fresh or corrupt
		return 1
	fi
	echo $TEMP_MOUNT_POINT
}
ReadBkBootVersion()
{
	RESULT=0
	CUR_BOOT=$(ReadBootSystem)
	if [ $? != "0" ]; then #unable to read current boot system
		return 1
	fi
	if [ "$CUR_BOOT" = "$ONE_BRBOX_NAME" ]; then
		MOUNT_DIR=$(MountDevice /dev/$TWO_BRBOX_PART)
		if [ $? != "0" ]; then #unable mount second system, filesystem might be fresh or corrupt
			return 1
		fi
		BOOT_VER=$(ReadBootVersion $MOUNT_DIR/$VERSION_FILE_PATH)
		if [ $? != "0" ]; then #unable to read version
			RESULT=1
		else
			echo $BOOT_VER
		fi
		umount /dev/$TWO_BRBOX_PART
		sync
		rm -r $MOUNT_DIR
		return $RESULT
	elif [ "$CUR_BOOT" = "$TWO_BRBOX_NAME" ]; then
		MOUNT_DIR=$(MountDevice /dev/$ONE_BRBOX_PART)
		if [ $? != "0" ]; then #unable mount first system, filesystem might be fresh or corrupt
			return 1
		fi
		BOOT_VER=$(ReadBootVersion $MOUNT_DIR/$VERSION_FILE_PATH)
		if [ $? != "0" ]; then #unable to read version
			RESULT=1
		else
			echo $BOOT_VER
		fi
		umount /dev/$ONE_BRBOX_PART
		sync
		rm -r $MOUNT_DIR
		return $RESULT
	else
		return 1
	fi
}
FlipBootMarker()
{
	RESULT=0	
	CUR_BOOT=$(ReadBootSystem)
	if [ $? != "0" ]; then #unable to read current boot system
		return 1
	fi
	if [ "$CUR_BOOT" = "$ONE_BRBOX_NAME" ]; then
		BOOT_MARKER=$(ReadBootMarker $GRUBCFG_FILE_PATH)
		if [ $? != "0" ]; then #unable to read boot marker
			return 1
		fi
		if [ $BOOT_MARKER = 0 ];then #flipping is not done, so do it
			#mount second system for reading its partuuid to be included in grub.cfg of first system
			#MOUNT_DIR=$(MountDevice /dev/$TWO_BRBOX_PART)
			#if [ $? != "0" ]; then #unable mount second system, filesystem might be fresh or corrupt
			#	return 1
			#fi
			WriteBootMarker $GRUBCFG_FILE_PATH 1 #$MOUNT_DIR/$UUID_FILE_PATH
			RESULT=$?
			sync
			#umount /dev/$TWO_BRBOX_PART
			#sync
			#rm -r $MOUNT_DIR
			return $RESULT
		else
			return 0 #already boot-marker is flipped,no action needed	
		fi		
	elif [ "$CUR_BOOT" = "$TWO_BRBOX_NAME" ]; then #mount first partition coz, boot marker resides in first partition
		MOUNT_DIR=$(MountDevice /dev/$ONE_BRBOX_PART)
		if [ $? != "0" ]; then #unable mount first system, filesystem might be fresh or corrupt
			return 1
		fi
		BOOT_MARKER=$(ReadBootMarker $MOUNT_DIR/$GRUBCFG_FILE_PATH)
		if [ $? != "0" ]; then #unable to read boot marker
			umount /dev/$ONE_BRBOX_PART
			sync
			rm -r $MOUNT_DIR
			return 1
		fi
		if [ $BOOT_MARKER = 1 ];then #flipping is not done, so do it
			WriteBootMarker $MOUNT_DIR/$GRUBCFG_FILE_PATH 0 #$MOUNT_DIR/$UUID_FILE_PATH
			RESULT=$?
			sync
		else
			RESULT=0 #already boot-marker is flipped,no action needed
		fi
		umount /dev/$ONE_BRBOX_PART
		sync
		rm -r $MOUNT_DIR
		return $RESULT	
	else
		return 1
	fi
}
###############################################################
if [ $# -lt 1  ]; then 
	echo $USAGE
	echo $USAGE1
	exit 1
fi
while getopts cvfb f
do
    case $f in
	c) SHOW_BOOT_SYSTEM=1 ;;    #current: show which system is currently booted
	v) SHOW_BOOT_VERSION=1;;    #version: show the version of the current system
	f) FLIP_BOOT_MARKER=1 ;;    #flip   : flip the boot marker flag so that next reboot boots other system
	b) SHOW_BKBOOT_VERSION=1;;  #bkup   : show the version of the alternate system
    esac
done

#execute one of the commands in the given sequence
[ $SHOW_BOOT_SYSTEM = 1    ] && { ReadBootSystem; return $?; }
[ $SHOW_BOOT_VERSION = 1   ] && { ReadBootVersion $VERSION_FILE_PATH; return $?; }
[ $SHOW_BKBOOT_VERSION = 1 ] && { ReadBkBootVersion; return $?; }
[ $FLIP_BOOT_MARKER = 1    ] && { FlipBootMarker; return $?; }




